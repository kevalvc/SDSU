Hybrid images are generated by superimposing two images at two
different spatial scales:

- The low-spatial scale is obtained by filtering one image with a low-pass filter
- The high spatial scale is obtained by filtering a second image with a high-pass filter
- The final image is composed by adding these two filtered images.

Hybrid images, however, contain two coherent global image interpretations, one of which is of the low spatial frequencies, the other of high spatial frequencies.

///////////////////////////////////////////////////////////////////////////////

In convolution, two mathematical functions are combined to produce a third function. In image processing functions are usually called kernels. A kernel is nothing more than a (square) array of pixels (a small image so to speak). Usually, the values in the kernel add up to one. This is to make sure no energy is added or removed from the image after the operation.

function one_channel_output = one_channel_filter(image, filter)    
    img_height = size(image, 1);
    img_width = size(image, 2);

361 x 410

    filter_height = size(filter, 1);
    filter_width = size(filter, 2);

21 x 21

    pad_height = (filter_height - 1)/2; % size of vertical padding
    pad_width = (filter_width - 1)/2; % size of horizontal padding

10 x 10

    one_channel_output = zeros(img_height, img_width); % pre-allocate output matrix

361 x 410

    padded = zeros(img_height + 2 * pad_height, img_width + 2 * pad_width); % pre-allocate padded matrix

381 x 430

    padded(1 + pad_height: img_height + pad_height, 1 + pad_width: img_width + pad_width) = image; % copy the input image over

11-371 x 11-420

    for ii = 1 : img_height
        for jj = 1 : img_width
            submatrix = padded(ii : ii + 2 * pad_height, jj : jj + 2 * pad_width); % get the submatrix surrounding this pixel      
            one_channel_output(ii, jj) = sum(sum(submatrix .* filter));
        end
    end
end

output = zeros(size(image));
dim = length(size(image)); %1 if gray scale, 3 if colored
if (dim == 1)
    output = one_channel_filter(image, filter);
elseif (dim == 3)
    for d = 1: 3
        output(:, :, d) = one_channel_filter(image(:, :, d), filter);
    end
end
end